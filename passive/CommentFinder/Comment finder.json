{
  "description": "",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 2
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 3
        }
      },
      {
        "source": {
          "exec_alias": "true",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": -10,
          "y": 180
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": -10,
          "y": -140
        },
        "id": 2,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": -10,
          "y": -30
        },
        "id": 3,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": -10,
          "y": 70
        },
        "id": 4,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "async function run(input, sdk) {\n  const { request, response } = input;\n\n  // Get the response body as text\n  const responseBody = response.getBody()?.toText();\n  if (!responseBody) {\n    sdk.console.log(\"Response body is empty\");\n    return;\n  }\n\n  // Regular expression to match developer comments\n  const commentRegex = /<!--(.*?)-->|\\/\\/(.*?)(\\r?\\n)|\\/\\*([\\s\\S]*?)\\*\\//g;\n\n  // Extract matches\n  const matches = [...responseBody.matchAll(commentRegex)];\n\n  if (matches.length > 0) {\n    const comments = matches.map((match) => match[1] || match[2] || match[4]).filter(Boolean);\n\n    if (comments.length > 0) {\n      sdk.console.log(`Found ${comments.length} developer comment(s):`);\n      comments.forEach((comment) => sdk.console.log(comment));\n\n      // Prepare the finding description\n      const findingDescription = `The following developer comments were found:\\n\\n${comments.join(\"\\n\")}`;\n      await sdk.findings.create({\n        title: \"Developer Comments Found\",\n        reporter: \"Comment Extractor\",\n        request: request,\n        description: findingDescription,\n        severity: \"info\",\n      });\n\n      return comments;\n    } else {\n      sdk.console.log(\"No developer comments found\");\n      return [];\n    }\n  } else {\n    sdk.console.log(\"No developer comments found\");\n    return [];\n  }\n}\n\nexport { run };\n",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      }
    ]
  },
  "id": "ac96234e-5256-4682-8678-19f731b6fb22",
  "kind": "passive",
  "name": "Comment finder"
}
